# Find the slope and intercept of the line that passes through the 1st and 3rd
# quartile of the normal q-q plot
y     <- qnorm(c(0.25,0.5)) # Find the 1st and 3rd quartiles
x     <- qnorm( c(0.25, 0.5))         # Find the matching normal values on the x-axis
slope <- diff(y) / diff(x)             # Compute the line slope
int   <- y[1] - slope * x[1]           # Compute the line intercept
ggplot(oldf, aes(sample=eruptions))+stat_qq()+
geom_abline(intercept=int, slope=slope) + coord_flip() + ylab("Data values")  + xlab("Population Values")
source('~/GoogleDrive/STATS412/R files/hw06.r', echo=TRUE)
quantile(eruption, 0.25)
quantile(eruptions, 0.25)
geom_abline(intercept=0, slope=1) + ylab("Data values")  + xlab("Population Values")
geom_abline(intercept= 0, slope= 1) + ylab("Data values")  + xlab("Population Values")
y     <- qnorm(c(0.25,0.5)) # Find the 1st and 3rd quartiles
x     <- qnorm( c(0.25, 0.5))         # Find the matching normal values on the x-axis
slope <- diff(y) / diff(x)             # Compute the line slope
int   <- y[1] - slope * x[1]           # Compute the line intercept
ggplot(oldf, aes(sample=eruptions))+stat_qq()+
geom_abline(intercept= 0, slope= 1) + ylab("Data values")  + xlab("Population Values")
n <- nrow(father.son)
(1:6)
nrow(wait)
nrow(soap)
df <- data.frame(y = rt(200, df = 5))
p <- ggplot(df, aes(sample = y))
p + stat_qq()
p + geom_point(stat = "qq")
y     <- qnorm(c(0.25,0.5)) # Find the 1st and 3rd quartiles
x     <- qnorm( c(0.25, 0.5))         # Find the matching normal values on the x-axis
slope <- diff(y) / diff(x)             # Compute the line slope
int   <- y[1] - slope * x[1]           # Compute the line intercept
ggplot(oldf, aes(sample=eruptions))+
geom_abline(intercept= 0, slope= 1) + ylab("Data values")  + xlab("Population Values")
y     <- qnorm(c(0.25,0.5)) # Find the 1st and 3rd quartiles
x     <- qnorm( c(0.25, 0.5))         # Find the matching normal values on the x-axis
slope <- diff(y) / diff(x)             # Compute the line slope
int   <- y[1] - slope * x[1]           # Compute the line intercept
ggplot(oldf, aes(sample=eruptions))+ stat_qq()
geom_abline(intercept= 0, slope= 1) + ylab("Data values")  + xlab("Population Values")
mean(eruptions)
sd(eruptions)
library(ggplot2)
wait <- c(11.6, 12.6, 12.7, 12.8, 13.1, 13.3, 13.6, 13.7, 13.8, 14.1, 14.3, 14.3, 14.6, 14.8, 15.1, 15.2, 15.6, 15.6, 15.7, 15.8, 15.8, 15.9, 15.9, 16.1, 16.2, 16.2, 16.3, 16.4, 16.5, 16.5, 16.5, 16.6, 17.0, 17.1, 17.3, 17.3, 17.4, 17.4, 17.4, 17.6, 17.7, 18.1, 18.3, 18.3, 18.3, 18.5, 18.5, 18.8, 19.2, 20.3)
mean(wait); sd(wait)
n <- length(wait)
wait-y <- (1:n)/n - 0.5/n
library(ggplot2)
wait <- c(11.6, 12.6, 12.7, 12.8, 13.1, 13.3, 13.6, 13.7, 13.8, 14.1, 14.3, 14.3, 14.6, 14.8, 15.1, 15.2, 15.6, 15.6, 15.7, 15.8, 15.8, 15.9, 15.9, 16.1, 16.2, 16.2, 16.3, 16.4, 16.5, 16.5, 16.5, 16.6, 17.0, 17.1, 17.3, 17.3, 17.4, 17.4, 17.4, 17.6, 17.7, 18.1, 18.3, 18.3, 18.3, 18.5, 18.5, 18.8, 19.2, 20.3)
mean(wait); sd(wait)
n <- length(wait)
wait-y = (1:n)/n - 0.5/n
n
library(ggplot2)
wait <- c(11.6, 12.6, 12.7, 12.8, 13.1, 13.3, 13.6, 13.7, 13.8, 14.1, 14.3, 14.3, 14.6, 14.8, 15.1, 15.2, 15.6, 15.6, 15.7, 15.8, 15.8, 15.9, 15.9, 16.1, 16.2, 16.2, 16.3, 16.4, 16.5, 16.5, 16.5, 16.6, 17.0, 17.1, 17.3, 17.3, 17.4, 17.4, 17.4, 17.6, 17.7, 18.1, 18.3, 18.3, 18.3, 18.5, 18.5, 18.8, 19.2, 20.3)
mean(wait); sd(wait)
n <- length(wait)
wait_y <- (1 : n)/n - 0.5/n
wait_y
qnorm(0.03,16.034,1.948)
qnorm(0.5,16.034,1.948)
source('~/GoogleDrive/STATS412/R files/hw06.r', echo=TRUE)
soap$wait_y
source('~/GoogleDrive/STATS412/R files/hw06.r', echo=TRUE)
source('~/GoogleDrive/STATS412/R files/hw06.r', echo=TRUE)
source('~/GoogleDrive/STATS412/R files/hw06.r', echo=TRUE)
source('~/GoogleDrive/STATS412/R files/hw06.r', echo=TRUE)
source('~/GoogleDrive/STATS412/R files/hw06.r', echo=TRUE)
source('~/GoogleDrive/STATS412/R files/hw06.r', echo=TRUE)
n2
erup_percentile
oldf
eruptions = sort(c(91, 51, 79, 53, 82, 51, 76, 82, 84, 53, 86, 51, 85, 45, 88, 51, 80, 49, 82, 75, 73, 67, 68, 86, 72, 75, 75, 66, 84, 70, 79, 60, 86, 71, 67, 81, 76, 83, 76, 55))
n2 <- length(eruptions)
erup_percentile <- (1 : n2)/n2 - 0.5/n2
erup_y <- qnorm(erup_percentile, mean(eruptions), sd(eruptions))
oldf = data.frame(eruptions, erup_y)
# Find the slope and intercept of the line that passes through the 1st and 3rd
# quartile of the normal q-q plot
#y     <- qnorm(c(0.25,0.5)) # Find the 1st and 3rd quartiles
#x     <- qnorm( c(0.25, 0.5))         # Find the matching normal values on the x-axis
#slope <- diff(y) / diff(x)             # Compute the line slope
#int   <- y[1] - slope * x[1]           # Compute the line intercept
ggplot(oldf, aes(x=eruptions,y=erup_y)) + ylab("Population Values") + xlab("Data Values")  + geom_point()+ geom_abline(slope = 1, intercept = 0)
#ggplot(oldf, aes(sample=eruptions))+ stat_qq()
#geom_abline(intercept= 0, slope= 1) + ylab("Data values")  + xlab("Population Values")
eruptions
oldf
sd(eruptions)
erup_percentile
oldf
pnorm(11.95,12,0.2)
0.04/40
sqrt(0.001)
pnorm(11.95,12,0.001)
pnorm(11.95,12,sqrt(0.001))
0.2/sqrt(40)
qnorm(0.005,0,1)
pnorm(11.99,12,0.2/sqrt(2654))
pnorm(12.01,12,0.2/sqrt(2654))
0.995-0.005
100*0.3*0.7
1000*0.003
pnorm(35.5,30,sqrt(21),0)
pbinom(35,100,0.3)
1 - 0.8839
pnorm(36,30,sqrt(21),0)
pnorm(35,30,sqrt(21),0)
pnorm(35.5,30,sqrt(21),0)
pnorm(20.02,20,sqrt(0.025))
pnorm(20.02,20,sqrt(0.025),0)
sqrt(0.025)
sqrt(2.5)
pnorm(20.2,20,sqrt(0.025),0)
qnorm(0.1,20,sqrt(0.025))
qnorm(0.25,0,1)
pnorm(889.5,900,sqrt(90))
pbinom(2,5,0.1335)
1 - 0.9807174
pbinom(3,5,0.1335)
pbinom(0,5,0.1335)
pbinom(2,5,0.1335)
pnorm(-3,0,1)
1- pnorm(-3,0,1)
pnorm(0.1,0,1)
qnorm(0.1,0,1)
pnorm(1,0,1)
pnorm(-1,0,1)
1 - pnorm(0.7071,0,1)
qnorm(0.6,0,1)
qnorm(0.025,0,1,0)
qt(0.025,4)
qt(0.025,4, 0)
qt(0.025,4, 0,0)
qt(0.025,99,0,0)
qt(0.025,120,0,0)
qt(0.025,99,0,0)
qt(0.025,567,0,0)
qnorm(0.05,0,1,0)
qnorm(0.995,0,1)
qnorm(0.0025,0,1)
qnorm(0.025,0,1)
qnorm(1-0.025,0,1)
3.05 - 3.2
pt(-3.1195,49)
2*%
qt(0.025,25)
pt(2.0283, 25)
pt(-2.0283, 25)
qt(0.05, 25)
source('~/.active-rstudio-document', echo=TRUE)
difference
mean(difference)
source('~/.active-rstudio-document', echo=TRUE)
mean(treatment)
mean(control)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw09.r', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw09.r', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw09.r', echo=TRUE)
summary(treatment)
summary(qn1)
numSummart(qn1)
numSummary(qn1)
sd(qn1)
sapply(qn1, sd)
qt(0.01,9)
source('~/GoogleDrive/STATS412/r-files/hw09.r', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw09.r', echo=TRUE)
qt(0.01,15)
#Question 4
rest = c(15,16,21,17,18,15,19,21,18,14)
exercise = c(30,37,39,37,40,39,34,40,38,34)
qn4 = data.frame(rest, exercise)
qn4
summart(qn4)
summary(qn4)
qn4$rest - qn4$exercise
source('~/GoogleDrive/STATS412/r-files/hw09.r', echo=TRUE)
qn4
#Question 4
rest = c(15,16,21,17,18,15,19,21,18,14)
exercise = c(30,37,39,37,40,39,34,40,38,34)
increase = exercise - rest
qn4 = data.frame(rest, exercise, increase)
ggplot(qn4, aes(sample=increase))+ stat_qq() + ggtitle("Increase")
mean(increase)
sd(increase)
qt(0.025,9)
#Qn 4
carFront = c(32.8, 26.6, 35.6, 36.4, 29.2, 40.9, 40.9, 34.8, 36.6)
carRear = c(41.2, 35.2, 46.1, 46.0, 39.9, 51.7, 51.6, 46.1, 47.3)
qn4 = data.frame(carFront, carRear, carFront - carRear)
qn 4
qn4
qn4 = data.frame(carFront, carRear, carRear - carFront)
qn4
source('~/GoogleDrive/STATS412/r-files/hw09.r', echo=TRUE)
ggplot(qn4, aes(sample=carRear - carFront))+ stat_qq() + ggtitle("Rear - Front")
qn4
#Qn 3
carFront = c(32.8, 26.6, 35.6, 36.4, 29.2, 40.9, 40.9, 34.8, 36.6)
carRear = c(41.2, 35.2, 46.1, 46.0, 39.9, 51.7, 51.6, 46.1, 47.3)
qn4 = data.frame(carFront, carRear, carRear - carFront)
ggplot(qn4, aes(sample=carRear - carFront))+ stat_qq() + ggtitle("Rear - Front")
qn4
mean(qn4$carRear...carFront)
sd(qn4$carRear...carFront)
qt(0.025,8)
source('~/GoogleDrive/STATS412/r-files/hw09.r', echo=TRUE)
qnorm(0.005,0,1)
qnorm(0.025,0,1)
qnorm(0.4821, 0,1)
pnorm(0.4821, 0,1)
qnorm(0.6851)
pnorm(192.5,190,sqrt(9.5))
pbinom(192,200,0.95)
pnorm(192,190,sqrt(9.5))
1 - 0.79134
qnorm(0.005,0,1)
mean(treatment) - mean(control)
mean(increase)
increase
qnorm(0.005,0,1)
qnorm(0.01,0,1)
qt(2.4847,219,1)
pt(2.4847,219,1)
pt(2.4847,219,0)
pt(2.4847,219)
1 - 0.9931
source('~/GoogleDrive/STATS412/r-files/hw10.r', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw10.r', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw10.r', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw10.r', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw10.r', echo=TRUE)
m <- mean(sample3) + sd(sample3)
c <- mean(sample3)
m
c
source('~/GoogleDrive/STATS412/r-files/hw10.r', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw06.r', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw10.r', echo=TRUE)
source('~/GoogleDrive/STATS412/r-files/hw10.r', echo=TRUE)
pt(0.31623,9)
pt(0.31623,9, lower.tail=FALSE)
0.3795*2
cycle = c(3.45,3.47,3.57,3.52,3.4,3.63)
mean(cycle)
sd(cycle)
pt(0.1952,5,lower.tail=FALSE)
pt(-0.1952,5)
pnorm(-1.164,0,1)
pnorm(1.8626,0,1,FALSE)
rnorm(10)
set.seed(1303)
rnorm(50)
x = rnorm(100)
y = rnorm(100)
plot(x,y)
x = seq(-pi, pi, length = 50)
x
y = x
f = outer(x,y, function(x,y) cos(y)/(1 + x^2))
contour(x,y,f)
?outer
a = seq(10)
b = a
outer(a,b, function(a,b) a ^ b)
contour(x,y,f)
contour(x,y,f, nlevels=45, add=T)
?contour
contour(x,y,f)
contour(x,y,f, nlevels=45, add=T)
contour(x,y,f, nlevels=45, add=T)
fa = (f - t(f) ) / 2
t(f)
?t
image(x,y,fa)
contour (x,y,fa, nlevels=15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa, theta=30)
A=matrix(1:16,4,4)
A
A[c(1,3), c(2,4)]
A[1:3, 2:4]
A[1:2,]
A[,1:2]
A[1,]
A[-1, ]
dim(A)
clear
clc
Auto = read.table("Auto.data")
import Auto
Auto
mpg
load(mpg)
import mpg
from mpg import *
load(ggplot2)
source('~/.active-rstudio-document', echo=TRUE)
pnorm(0.9)
qnorm(0.9)
qnorm(1)
qnorm(0.95)
pnorm(2)
pnorm(1)
pnorm(3)
pnorm(1) - pnorm(-1)
pnorm(2) - pnorm(-2)
?apply
apply(seq(2), function(x) pnorm(x) - pnorm(-x))
apply(seq(2), FUN = function(x) pnorm(x) - pnorm(-x))
pnorm(3) - pnorm(-3)
qnorm(0.7)
qnorm(0.9)
install.packages("ISLR")
Auto=read.table("Auto.data")
Auto=read.table("Auto.data")
setwd("~/statlearn/datasets")
Auto=read.table("Auto.data")
Auto
fix(Auto)
data()
mtcars
mtcars[1,]
data(mtcars)
mtcars[6,]
mtcars[1;6,]
mtcars[1:6,]
Auto
Auto
library(ISLR)
Auto
summary(mpg)
mpg
library(ISLR)
mpg
Auto
summary(Auto)
summary(Auto$mpg)
numcols(Auto)
ncols(Auto)
ncol(Auto)
nrow(Auto)
Auto[1:2,]
College[1,]
fix(College)
rownames(college)=college[,1]
rownames(College)=College[,1]
college = College
rownames(college)=College[,1]
rownames(college)=college[,1]
college
college[1:2,]
fix(college)
college=college[,1]
fix(college)
college=College[,-1]
college
fix(college)
college = College
rownames(college)=college[1,]
rownames(college)=college[,1]
college[,1]
fix(college)
college=college[,-1]
fix(college)
fix(college)
summary(college)
library(MASS)
Boston
library(ISLR)
college=College
rownames(college)=college[,1]
college=College
fix(college)
fix(college)
college=college[,-1]
fix(college)
summary(college)
?pairs
pairs(1:2, 3:4)
pairs(1:2)
pairs(1)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
iris[1:4]
iris[1:4,]
iris[,1:4]
pairs(iris[1:2])
pairs(iris[1:1])
pairs(iris[1:2])
pairs(iris[1:3])
pairs(college[1:10])
?plot
plot(college$Outstate)
plot(Auto$cylinders, Auto$mpg)
Auto$cylinders
Auto$cylinders=as.factor(Auto$cylinders)
plot(Auto$cylinders)
hist(Auto$cylinders)
attach(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
q
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
qq
stop
plot(horsepower, mpg)
identify(horsepower, mpg, name)
fix(college)
college=College
college[1]
college[1:4,1]
college[15,1]
fix(college)
college$Private = as.factor(college$Private)
plot(college$Outstate, college$Private)
plot(college$private, college$Outstate)
plot(college$Private, college$Outstate)
Elite=rep("No", nrow(college))
?rep
Elite[college$Top10perc > 50] = "Yes"
Elite=as.factor(Elite)
Elite
college=data.frame(college, Elite)
college$Elite
summary(Elite)
plot(college$Elite, college$Outstate)
plot(college$Private, college$Outstate)
plot(college$Elite, college$Outstate)
plot(college$Outstate)
summary(college$Outstate)
plot(rep(1, nrow(college)), college$Outstate)
plot(as.factor(rep(1, nrow(college))), college$Outstate)
?plot
plot(college$Elite, college$Outstate)
summary(college$Outstate)
plot(as.factor(1), college$Outstate)
plot(), college$Outstate)
plot(, college$Outstate)
plot(college$Outstate)
boxplot(college
)
boxplot(college$Outstate)
?plot
methods(plot)
?boxplot
Auto
Auto[1,]
Auto$cylinders
Auto$displacement
summary(Auto)
sd(Auto)
apply(Auto, sd)
apply(Auto, fun=sd)
sapply(Auto, sd)
sapply(Auto, mean)
sapply(Auto[,-Auto$name], mean)
sapply(Auto[,-8], mean)
sapply(Auto[,-9], mean)
sapply(Auto[,-9], sd)
sapply(Auto[~mpg + cylinders], sd)
sapply(~Auto$mpg + Auto$cylinders, sd)
~Auto$mpg + Auto$cylinders
sapply(Auto[,-10:85], sd)
sapply(Auto[,-(10:85)], sd)
sapply(Auto[-10:85,], sd)
sapply(Auto[-(10:85),], sd)
sapply(Auto[-(10:85),-9], sd)
sapply(Auto[-(10:85),-c(2,9)], sd)
sapply(Auto[-(10:85),-c(2,9)], mean)
pairs(Auto)
plot(Auto$horsepower, Auto$weight)
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
?Boston
attach(Boston)
lm(medv~lstat,Boston)
lm.fit =lm(medv~lstat,Boston)
summary(lm.fit)
lm
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
lm.fit$residuals
confint(lm.fit)
predict(lm.fit,data.frame(lstat=c(5,10,15)),
interval ="confidence ")
predict(lm.fit, data.frame(lstat=c(5,10,15)),interval="confidence")
plot(lstat, medv)
abline(lm.fit)
abline(lm.fit, lwd=3)
abline(lm.fit, lwd=3, col=red)
abline(lm.fit, lwd=3, col='red')
plot(lstat, medv, col='red')
abline(lm.fit, lwd=3, col='blue')
plot(lstat, medv, col='red', pch=20)
plot(lstat, medv, col='red', pch='+')
plot(lstat, medv, col='red', pch='o')
plot(lstat, medv, col='red', pch='.')
plot(lstat, medv, col='red', pch='-')
plot(lstat, medv, col='red', pch='+')
abline(lm.fit, lwd=3, col='blue')
par(mfrow=c(2,2))
plot(lm.fit)
